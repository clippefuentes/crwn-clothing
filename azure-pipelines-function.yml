# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pr:
  branches:
    include:
    - master
  paths:
    include:
    - functions/src/FUNCTION_1/*
    - functions/src/FUNCTION_2/*
    - functions/src/FUNCTION_3/*
pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Initialization_and_Test
    displayName: Initialization_and_Test
    jobs:
    - job: Install_and_Test
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Install Node.js and Test'
      - script: |
          npm install
          npm install -g firebase-tools
        workingDirectory: functions
        displayName: 'npm install and test'
    - job: ChosePipelines
      displayName: 'ChosePipelines'
      steps:
      - bash: |
          CHANGED_FILES=$(git diff HEAD HEAD~ --name-only)
          for FILE in $CHANGED_FILES
            do
              if [[ $FILE == *functions/src/FUNCTION_1* ]]; then
                echo "MATCH:  ${FILE} changed"
                echo "##vso[task.setvariable variable=FUNCTION_1;isOutput=true]FUNCTION_1"
              fi
              if [[ $FILE == *functions/src/FUNCTION_2* ]]; then
                echo "MATCH:  ${FILE} changed"
                echo "##vso[task.setvariable variable=FUNCTION_2;isOutput=true]FUNCTION_2"
              fi
              if [[ $FILE == *functions/src/FUNCTION_3* ]]; then
                echo "MATCH:  ${FILE} changed"
                echo "##vso[task.setvariable variable=FUNCTION_3;isOutput=true]FUNCTION_3"
              fi
            done
        name: setvarStep

  # FUNCTION_1
  - stage: Build_and_Deploy_Prod_FUNCTION_1
    dependsOn: Initialization_and_Test
    condition: succeeded()
    displayName: FUNCTION_1 - Production
    jobs:
    - job: Build_FUNCTION_1
      variables:
        textVar: $[ stageDependencies.Initialization_and_Test.ChosePipelines.outputs['setvarStep.FUNCTION_1'] ]
      condition: eq(variables.textVar, 'FUNCTION_1') #map doThing and check the value
      steps:
      - script: echo "running FUNCTION_1"
      - script: dir
        workingDirectory: functions/src/FUNCTION_1
        displayName: List contents of a folder of the FUNCTION_1
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Build NPM'
      - script: |
          npm install
          npm install -g firebase-tools
          npm run build
        workingDirectory: functions/src
        displayName: 'Installation and Build FUNCTION_1'
      - script: |
          firebase deploy --token $(FIREBASE_TOKEN) --project $(FB_PROJECT) --only function:FUNCTION_1-runFunction1
        workingDirectory: functions/src
        displayName: 'Installation and Build FUNCTION_1-runFunction1'     
    - job: Done_FUNCTION_1
      dependsOn: Build_FUNCTION_1
      condition: succeeded() 
      steps:
      - script: echo "Build Stage on FUNCTION_1 is done"

  # FUNCTION_2
  - stage: Build_and_Deploy_Prod_FUNCTION_2
    dependsOn: Initialization_and_Test
    condition: succeeded()
    displayName: FUNCTION_2 - Production
    jobs:
    - job: Build_FUNCTION_2
      variables:
        textVar: $[ stageDependencies.Initialization_and_Test.ChosePipelines.outputs['setvarStep.FUNCTION_2'] ]
      condition: eq(variables.textVar, 'FUNCTION_2') #map doThing and check the value
      steps:
      - script: echo "running FUNCTION_2"
      - script: dir
        workingDirectory: functions/src/FUNCTION_2
        displayName: List contents of a folder of the FUNCTION_2
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Build NPM'
      - script: |
          npm install
          npm install -g firebase-tools
          npm run build
        workingDirectory: functions/src
        displayName: 'Installation and Build FUNCTION_2'
      - script: |
          firebase deploy --token $(FIREBASE_TOKEN) --project $(FB_PROJECT) --only function:FUNCTION_2-testFunction2
        workingDirectory: functions/src
        displayName: 'Installation and Build FUNCTION_2-testFunction2'     
    - job: Done_FUNCTION_2
      dependsOn: Build_FUNCTION_2
      condition: succeeded() 
      steps:
      - script: echo "Build Stage on FUNCTION_2 is done"

  # FUNCTION_3
  - stage: Build_and_Deploy_Prod_FUNCTION_3
    dependsOn: Initialization_and_Test
    condition: succeeded()
    displayName: FUNCTION_3 - Production
    jobs:
    - job: Build_FUNCTION_3
      variables:
        textVar: $[ stageDependencies.Initialization_and_Test.ChosePipelines.outputs['setvarStep.FUNCTION_3'] ]
      condition: eq(variables.textVar, 'FUNCTION_3') #map doThing and check the value
      steps:
      - script: echo "running FUNCTION_3"
      - script: dir
        workingDirectory: functions/src/FUNCTION_3
        displayName: List contents of a folder of the FUNCTION_3
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Build NPM'
      - script: |
          npm install
          npm install -g firebase-tools
          npm run build
        workingDirectory: functions/src
        displayName: 'Installation and Build FUNCTION_3'
      - script: |
          firebase deploy --token $(FIREBASE_TOKEN) --project $(FB_PROJECT) --only function:FUNCTION_3-invokeFunction3
        workingDirectory: functions/src
        displayName: 'Installation and Build FUNCTION_3-invokeFunction3'     
    - job: Done_FUNCTION_3
      dependsOn: Build_FUNCTION_3
      condition: succeeded() 
      steps:
      - script: echo "Build Stage on FUNCTION_3 is done"